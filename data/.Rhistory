#  Librerias
library(dplyr)
library(ggplot2)
library(caret)
library(corrplot)
library(MASS)
library(fastDummies)
library(missForest)
library(stringr)
url <- "https://archive.ics.uci.edu/ml/machine-learning-databases/credit-screening/crx.data"
df <- read.csv(url)
write.csv(df, "cxr_data.csv")
summary(df)
str(df)
head(df)
# seleccionar las variables a ser pasadas a factores
# convertir los chr a factores
factor_columns <- c("b", "u", "g", "w", "v", "t", "t.1", "f", "g.1", "X.")
df[factor_columns] <- lapply(df[factor_columns], factor)
# convertir a numeric los que deban ser convertidos en este caso las unicas columnas continuas que estaban establecidas con chr
numeric_columns <- c("X30.83", "X00202")
df[numeric_columns] <- sapply(df[numeric_columns], as.numeric)
head(df)
for (columna in 1:ncol(df)){
if (class(df[,columna]) == "factor"){
# Por defecto se mostrará un gráfico de barras.
plot(df[,columna],
col = topo.colors(length(levels(df[,columna]))), # topo asigna un color diferente a cada nivel categorico distinto
las = 1,
main = paste("Diagrama de barras de: ", colnames(df[columna])))  # concatena, en este caso para añadir el titulo de la columna
} else {
# Para las variables numéricas, histograma.
hist(df[, columna],
border = "blue",
col = "tomato",
las = 1,
main = paste("Histograma de: ", colnames(df[columna])),
xlab  = colnames(df[columna]))
}
}
# EDA
explain.target <- function(dataframe.object, target.feature){
for (columna in 1:ncol(dataframe.object)){
if (names(dataframe.object[columna]) == "X."){
next
} else {
if (class(dataframe.object[, columna]) == "factor"){
plot <- ggplot(dataframe.object) +
geom_bar(aes(dataframe.object[, columna], fill = as.factor(target.feature))) +
labs(title=paste(names(dataframe.object[columna]), " ~ X.")) +
xlab(names(dataframe.object[columna])) +
ylab("Frecuencia") +
scale_fill_discrete(name="Aprobación de crédito", breaks=c("+", "-"),
labels=c("SI", "NO"))
} else {
plot <- ggplot(dataframe.object) +
geom_boxplot(aes(dataframe.object[, columna], fill = as.factor(target.feature))) +
coord_flip() +
labs(title=paste(names(dataframe.object[columna]), " ~ X.")) +
xlab(names(dataframe.object[columna])) +
scale_fill_discrete(name="Aprobación de crédito", breaks=c("+", "-"),
labels=c("SI", "NO"))
}
plot <- print(plot)
}
}
}
explain.target(dataframe.object = df, target.feature = df$X.)
numeric.values <- df %>% dplyr::select(X30.83, X0, X1.25, X01, X00202, X0.1)
corrplot(cor(numeric.values), method = "number", type="upper")
# for (columna in 1:ncol(df)){
#    columna <- na_if(columna, '?')
# }
df %>% mutate(across(.cols = everything(),.fns = ~ ifelse(. == "?", NA_character_, .)))
df <- missForest(df)$ximp
sapply(df, function(x) sum(is.na(x)))
View(df)
# for (columna in 1:ncol(df)){
#    columna <- na_if(columna, '?')
# }
df %>% mutate(across(.cols = everything(),.fns = ~ ifelse(. == '?', NA_character_, .)))
df <- missForest(df)$ximp
sapply(df, function(x) sum(is.na(x)))
View(df)
# for (columna in 1:ncol(df)){
#    columna <- na_if(columna, '?')
# }
df <- df %>% mutate(across(.cols = everything(),.fns = ~ ifelse(. == '?', NA_character_, .)))
df <- missForest(df)$ximp
#  Librerias
library(dplyr)
library(ggplot2)
library(caret)
library(corrplot)
library(MASS)
library(fastDummies)
library(missForest)
library(stringr)
url <- "https://archive.ics.uci.edu/ml/machine-learning-databases/credit-screening/crx.data"
df <- read.csv(url)
write.csv(df, "cxr_data.csv")
summary(df)
str(df)
head(df)
# seleccionar las variables a ser pasadas a factores
# convertir los chr a factores
factor_columns <- c("b", "u", "g", "w", "v", "t", "t.1", "f", "g.1", "X.")
df[factor_columns] <- lapply(df[factor_columns], factor)
# convertir a numeric los que deban ser convertidos en este caso las unicas columnas continuas que estaban establecidas con chr
numeric_columns <- c("X30.83", "X00202")
df[numeric_columns] <- sapply(df[numeric_columns], as.numeric)
head(df)
for (columna in 1:ncol(df)){
if (class(df[,columna]) == "factor"){
# Por defecto se mostrará un gráfico de barras.
plot(df[,columna],
col = topo.colors(length(levels(df[,columna]))), # topo asigna un color diferente a cada nivel categorico distinto
las = 1,
main = paste("Diagrama de barras de: ", colnames(df[columna])))  # concatena, en este caso para añadir el titulo de la columna
} else {
# Para las variables numéricas, histograma.
hist(df[, columna],
border = "blue",
col = "tomato",
las = 1,
main = paste("Histograma de: ", colnames(df[columna])),
xlab  = colnames(df[columna]))
}
}
# EDA
explain.target <- function(dataframe.object, target.feature){
for (columna in 1:ncol(dataframe.object)){
if (names(dataframe.object[columna]) == "X."){
next
} else {
if (class(dataframe.object[, columna]) == "factor"){
plot <- ggplot(dataframe.object) +
geom_bar(aes(dataframe.object[, columna], fill = as.factor(target.feature))) +
labs(title=paste(names(dataframe.object[columna]), " ~ X.")) +
xlab(names(dataframe.object[columna])) +
ylab("Frecuencia") +
scale_fill_discrete(name="Aprobación de crédito", breaks=c("+", "-"),
labels=c("SI", "NO"))
} else {
plot <- ggplot(dataframe.object) +
geom_boxplot(aes(dataframe.object[, columna], fill = as.factor(target.feature))) +
coord_flip() +
labs(title=paste(names(dataframe.object[columna]), " ~ X.")) +
xlab(names(dataframe.object[columna])) +
scale_fill_discrete(name="Aprobación de crédito", breaks=c("+", "-"),
labels=c("SI", "NO"))
}
plot <- print(plot)
}
}
}
explain.target(dataframe.object = df, target.feature = df$X.)
numeric.values <- df %>% dplyr::select(X30.83, X0, X1.25, X01, X00202, X0.1)
corrplot(cor(numeric.values), method = "number", type="upper")
# for (columna in 1:ncol(df)){
#    columna <- na_if(columna, '?')
# }
df <- df %>% mutate(across(.cols = everything(),.fns = ~ ifelse(. == '?', NA_character_, .)))
df <- missForest(df)$ximp
View(df)
setwd("E:/Estudios/Bigdata/TFM/data")
boxplot(pedidos$exceso_pcg)
pedidos <- read.csv("pedidos_detergentes.csv", sep = ",")
materiales <- read.csv("materiales.csv", sep = ",")
recetas <- read.csv("recetas.csv", sep = ",")
recetas <- read.csv("recetas.csv", header="false" sep = ",")
recetas <- read.csv("recetas.csv", header="false", sep = ",")
recetas <- read.csv("recetas.csv", header=FALSE, sep = ",")
View(recetas)
summary(pedidos)
str(pedidos)
hist(pedidos)
library("ggplot2")
geom_histogram(pedidos$cantidad)
geom_histogram(aes(pedidos$cantidad)
)
geom_histogram(aes(pedidos$cantidad))
geom_histogram(aes(pedidos$cantidad, pedidos$exceso_pcg))
geom_histogram(aes(pedidos$cantidad, pedidos$exceso_pcg), bins="20")
hist(x=pedidos$cantidad, las=1, breaks=10)
hist(x=pedidos$cantidad, las=1, breaks=20)
hist(x=pedidos$cantidad, las=2, breaks=20)
hist(x=pedidos$cantidad, las=1, breaks=20)
hist(x=pedidos$cantidad, las=1, breaks=30)
ggplot(aes(x=pedidos$cantidad))+
geom_histogram(binwidth = 3,
fill= "red",
color="green",
alpha=0.9)
pedidos %>%
ggplot(aes(x=cantidad))+
geom_histogram(binwidth = 3,
fill= "red",
color="green",
alpha=0.9)
library("dplyr")
pedidos %>%
ggplot(aes(x=cantidad))+
geom_histogram(binwidth = 3,
fill= "red",
color="green",
alpha=0.9)
pedidos %>%
ggplot(aes(x=cantidad))+
geom_histogram(binwidth = 10,
fill= "red",
color="green",
alpha=0.9)
pedidos %>%
ggplot(aes(x=exceso_pcg))+
geom_histogram(binwidth = 10,
fill= "red",
color="green",
alpha=0.9)
pedidos %>%
ggplot(aes(x=exceso_pcg))+
geom_histogram(binwidth = 3,
fill= "red",
color="green",
alpha=0.9)
pedidos %>%
ggplot(aes(x=exceso_pcg))+
geom_histogram(binwidth = 1,
fill= "red",
color="green",
alpha=0.9)
pedidos %>%
ggplot(aes(x=exceso_pcg))+
geom_histogram(binwidth = 0.01,
fill= "red",
color="green",
alpha=0.9)
pedidos %>%
ggplot(aes(x=exceso_pcg))+
geom_histogram(binwidth = 0.1,
fill= "red",
color="green",
alpha=0.9)
pedidos %>%
ggplot(aes(x=exceso_pcg))+
geom_histogram(binwidth = 0.05,
fill= "red",
color="green",
alpha=0.9)
